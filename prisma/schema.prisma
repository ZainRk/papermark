generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_PRISMA_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_SHADOW_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime   @default(now())
  plan           String     @default("trial")
  stripeId       String?    @unique
  subscriptionId String?    @unique
  startsAt       DateTime?
  endsAt         DateTime?
  accounts       Account[]
  documents      Document[]
  domains        Domain[]
  sessions       Session[]
  teams          UserTeam[]
}

model Team {
  id             String       @id @default(cuid())
  name           String
  plan           String       @default("free")
  stripeId       String?      @unique
  subscriptionId String?      @unique
  startsAt       DateTime?
  endsAt         DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  documents      Document[]
  domains        Domain[]
  invitations    Invitation[]
  sentEmails     SentEmail[]
  users          UserTeam[]
}

model UserTeam {
  role   Role   @default(MEMBER)
  userId String
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String            @id @default(cuid())
  name        String
  description String?
  file        String
  type        String?
  numPages    Int?
  teamId      String?
  ownerId     String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  team        Team?             @relation(fields: [teamId], references: [id])
  versions    DocumentVersion[]
  links       Link[]
  views       View[]
}

model DocumentVersion {
  id            String         @id @default(cuid())
  versionNumber Int
  documentId    String
  file          String
  type          String?
  numPages      Int?
  isPrimary     Boolean        @default(false)
  hasPages      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  pages         DocumentPage[]
  document      Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([versionNumber, documentId])
}

model DocumentPage {
  id         String          @id @default(cuid())
  versionId  String
  pageNumber Int
  file       String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  version    DocumentVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([pageNumber, versionId])
}

model Link {
  id                 String    @id @default(cuid())
  documentId         String
  url                String?   @unique
  name               String?
  slug               String?
  expiresAt          DateTime?
  password           String?
  allowedEmails      String[]
  emailProtected     Boolean   @default(true)
  allowDownload      Boolean?  @default(false)
  isArchived         Boolean   @default(false)
  domainId           String?
  domainSlug         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  enableNotification Boolean?  @default(true)
  document           Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  domain             Domain?   @relation(fields: [domainId], references: [id])
  views              View[]

  @@unique([domainSlug, slug])
}

model Domain {
  id          String   @id @default(cuid())
  slug        String   @unique
  userId      String
  teamId      String?
  verified    Boolean  @default(false)
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Team        Team?    @relation(fields: [teamId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  links       Link[]
}

model View {
  id          String   @id @default(cuid())
  linkId      String
  documentId  String
  viewerEmail String?
  viewedAt    DateTime @default(now())
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  link        Link     @relation(fields: [linkId], references: [id])
}

model Invitation {
  email     String
  expires   DateTime
  teamId    String
  createdAt DateTime @default(now())
  token     String   @unique
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([email, teamId])
}

model SentEmail {
  id         String    @id @default(cuid())
  type       EmailType
  recipient  String
  marketing  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  teamId     String
  domainSlug String?
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

enum Role {
  ADMIN
  MEMBER
}

enum EmailType {
  FIRST_DAY_DOMAIN_REMINDER_EMAIL
  FIRST_DOMAIN_INVALID_EMAIL
  SECOND_DOMAIN_INVALID_EMAIL
  FIRST_TRIAL_END_REMINDER_EMAIL
  FINAL_TRIAL_END_REMINDER_EMAIL
}
